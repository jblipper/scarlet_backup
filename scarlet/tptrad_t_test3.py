import pickle
#from auxbenneke.constants import unitfac
from auxbenneke.constants import unitfac, pi, day, Rearth, Mearth, Mjup, Rjup, sigmaSB, cLight, hPlanck, parsec, Rsun, au, G, kBoltz, uAtom,mbar, uAtom

import pdb
import scarlet
from scarlet import radutils as rad
import numpy as np
from scipy.integrate import RK45
from matplotlib import pyplot as plt
from toonew_funcs import get_fluxes_toon
from copy import deepcopy

import pdb
import scarlet
from scarlet import radutils as rad
import numpy as np
from scipy.integrate import RK45
from matplotlib import pyplot as plt
from copy import deepcopy

#%% STARTING POINT OF MAIN CODE
if __name__ == "__main__":
    #atm = scarlet.loadAtm('/Users/justinlipper/Research/GitHub/scarlet_results/FwdRuns20240307_0.3_100.0_64_nLay60/HD_209458_b/HD_209458_b_Metallicity75_CtoO0.54_pQuench1e-99_TpNonGrayTint75.0f0.25A0.1_pCloud100000.0mbar.atm')
    atm = scarlet.loadAtm('/Users/justinlipper/Research/GitHub/scarlet_results/FwdRuns20240209_0.3_100.0_64_nLay60/HD_209458_b/HD_209458_b_Metallicity1_CtoO0.54_pQuench1e-99_TpTeqTint100.0f0.25A0.1_pCloud100000.0mbar.atm')
pdb.set_trace()

T=np.ones(60)*2000
#T=np.array([ 1.77705462e+05, -3.54916625e+05, -1.49773140e+06, -3.75374431e+06,-8.01585268e+06, -1.55647184e+07, -2.58519628e+07, -1.79441072e+07,-1.99180266e+07, -2.10320078e+07, -2.22210297e+07, -2.35205869e+07,-2.49470340e+07, -2.64471817e+07, -2.86939881e+07, -3.10412549e+07,-3.34704627e+07, -3.57640188e+07, -3.81382279e+07, -4.13040850e+07,-4.34702936e+07, -4.32965084e+07, -4.15101782e+07, -3.62437233e+07,-2.91650108e+07, -2.14487072e+07, -1.43691073e+07, -8.89543618e+06,-5.15418976e+06, -2.84872796e+06, -1.49378615e+06, -7.44867920e+05,-3.64711696e+05, -1.69525010e+05, -7.21813088e+04, -2.89619026e+04,-9.17826942e+03, -2.44037612e+02,  3.47733547e+03,  5.01293760e+03,5.64129045e+03,  5.89084996e+03,  5.98535471e+03,  6.02135867e+03,6.03352028e+03,  6.03535983e+03,  6.03402545e+03,  6.03304804e+03,6.03215135e+03,  6.03172047e+03,  6.03155317e+03,  6.03145118e+03,6.03136859e+03,  6.03133279e+03,  6.03134648e+03,  6.03137525e+03,6.03141629e+03,  6.03152507e+03,  6.03190857e+03,  6.03289385e+03])
#T=np.array([702.9479696168794,713.2786779124422,722.7045784133379,732.696157051642,743.753880183868,755.8014535091122,767.8598673647135,779.1186692058243,789.865361820865,801.6670726257925,814.742379966605,828.6750471762499,843.2483019054786,858.3760281728315,874.1125084156081,890.4942820168549,908.7858667827371,929.5094115598118,951.8382193253866,974.9589343354603,999.1837372000501,1024.729984410233,1052.7937360483536,1084.0202653679503,1119.885983709968,1162.417493130407,1213.538497151404,1274.004805599077,1346.5224290743968,1432.988337933702,1533.9008637812565,1647.9971468587405,1767.8961021566101,1881.6243060330044,1981.4794040434522,2074.074340634299,2170.0445849194275,2265.771777135666,2338.3642622765815,2369.0464699681697,2373.9567160921856,2374.226548940419,2374.412542119859,2374.7652316013637,2375.4391468653853,2376.7372971765253,2379.258447753211,2384.1343880619065,2393.585123482547,2412.0223042325765,2444.3811724995944,2495.2790526803033,2572.7978653135356,2688.3503570766975,2855.0270002514562,3081.9134842255653,3371.8247108003216,3719.3416035449873,4107.782387253428,4517.8515421764005])
#T=np.array([ 200.04726038,  200.06800173,  200.98237113,  810.46787058,  818.47038155,  827.43164902,  839.73617398,  852.45641686,  867.41307381,  880.75136987,  893.33864209,  902.22252756,  910.80014821,  918.48811073,  928.69236472,  938.88333716,  951.69035626,  964.57268834,  979.87861396,  995.35824736, 1013.55341028, 1031.98709707, 1052.87973707, 1071.8743683,  1091.3655835, 1112.35532581, 1135.21706267, 1158.02967468, 1185.67665515, 1217.44437484, 1256.03165636, 1301.02118829, 1354.51825581, 1416.32259537, 1485.65744154, 1555.01349023, 1624.90291458, 1692.75385532, 1756.65506873, 1800.78171282, 1834.85726405, 1859.19141734, 1873.35973387, 1878.08347106, 1878.46252075, 1878.69783238, 1879.21135397, 1880.30695016, 1882.63383997, 1887.62244917, 1897.78171099, 1917.68511478, 1955.63669003, 2024.40178139, 2138.58925498, 2308.09571828, 2530.19339384, 2786.7255833,  3052.65723082, 3313.30311644])
#T=np.array([ 801.04726038,  802.06800173,  805.98237113,  810.46787058,  818.47038155,  827.43164902,  839.73617398,  852.45641686,  867.41307381,  880.75136987,  893.33864209,  902.22252756,  910.80014821,  918.48811073,  928.69236472,  938.88333716,  951.69035626,  964.57268834,  979.87861396,  995.35824736, 1013.55341028, 1031.98709707, 1052.87973707, 1071.8743683,  1091.3655835, 1112.35532581, 1135.21706267, 1158.02967468, 1185.67665515, 1217.44437484, 1256.03165636, 1301.02118829, 1354.51825581, 1416.32259537, 1485.65744154, 1555.01349023, 1624.90291458, 1692.75385532, 1756.65506873, 1800.78171282, 1834.85726405, 1859.19141734, 1873.35973387, 1878.08347106, 1878.46252075, 1878.69783238, 1879.21135397, 1880.30695016, 1882.63383997, 1887.62244917, 1897.78171099, 1917.68511478, 1955.63669003, 2024.40178139, 2138.58925498, 2308.09571828, 2530.19339384, 2786.7255833,  3052.65723082, 3313.30311644])
#T=np.array([560,713.2786779124422,722.7045784133379,732.696157051642,743.753880183868,755.8014535091122,767.8598673647135,779.1186692058243,789.865361820865,801.6670726257925,814.742379966605,828.6750471762499,843.2483019054786,858.3760281728315,874.1125084156081,890.4942820168549,908.7858667827371,929.5094115598118,951.8382193253866,974.9589343354603,999.1837372000501,1024.729984410233,1052.7937360483536,1084.0202653679503,1119.885983709968,1162.417493130407,1213.538497151404,1274.004805599077,1346.5224290743968,1432.988337933702,1533.9008637812565,1647.9971468587405,1767.8961021566101,1881.6243060330044,1981.4794040434522,2074.074340634299,2170.0445849194275,2265.771777135666,2338.3642622765815,2369.0464699681697,2373.9567160921856,2374.226548940419,2374.412542119859,2374.7652316013637,2375.4391468653853,2376.7372971765253,2379.258447753211,2384.1343880619065,2393.585123482547,2412.0223042325765,2444.3811724995944,2495.2790526803033,2572.7978653135356,2688.3503570766975,2855.0270002514562,3081.9134842255653,3371.8247108003216,3719.3416035449873,4107.782387253428,4517.8515421764005])
#T=T[::-1]
#T=np.array([1074.4482181048131,1121.9420765688992,1176.3529281100662,1237.1687531116022,1301.4005724960277,1362.4086273923463,1402.6223753758416,1401.7351236157772,1352.7586679852475,1271.997702589589, 1184.0483476487666, 1103.1000736493618, 1035.9449571717614,986.797500540058,957.2243804914506, 942.4161131304311, 938.6587960382013,941.5663297590517,948.1386741924126,957.3290455687113,968.8335994367401,982.129081360941,995.9607058657162,1008.6423055105771,1021.3346448503885, 1035.752560542239,1050.6941447818976,1067.5775549337513,1087.098222219365,1110.8451698424633, 1139.6561523363555,1174.9212057099726, 1218.359082917966, 1273.6212332735063, 1341.459527076653,1417.8946811784303,1499.0066667346894, 1582.9874597665373,1664.89421085604,1730.6751835590262,1779.0398081179833, 1813.2218065923082,1833.2320207862224,1840.0728756309957,1841.0714980919167, 1841.3372270032817,1841.8367993611864,1842.928365853905,1845.3828214028129, 1851.0315438246794,1863.1992209831199,1887.536925372106,1934.6726191550067, 2022.1010786574093,2172.6376471906956,2401.6915165149267,2697.4015040771096, 3012.084204402088,3307.702111716429,3577.725788640204])
 #T=np.array([1573.7805287, 1573.7805287, 1564.6727232, 1572.50472549, 1579.8577005, 1582.77376422, 1599.98898697, 1611.13356733, 1630.67317144, 1646.95898459, 1657.48698199, 1649.12948311, 1696.73780763, 1689.35313928, 1696.95183506, 1732.21499722, 1747.69733935, 1781.32757051, 1818.09490435, 1834.09030507, 1926.15082217, 1859.92530668, 2151.1016805,  1956.80852327, 1879.05791407, 2458.86864287, 2330.90108148, 2213.32551067, 2346.44132438, 2522.04173236, 2635.59962011, 2772.58569356, 2824.4466118,  3077.71843839, 3232.91498893, 3382.89719952, 3592.32227835, 3809.64020189, 4094.90969955, 4436.375497, 4784.09874903, 5009.7500054,  5040.16305346, 5005.58020028, 4997.66362721, 4999.63264426, 5000.04180483, 5000.00583158, 4999.99975268, 4999.99997187, 5000.0000005, 5000.00000004, 5000., 5000., 5000., 5000., 5000., 5000., 5000., 5000.])
 #T=np.array([1573.7805287, 1573.7805287, 1564.6727232, 1572.50472549, 1579.8577005, 1582.77376422, 1599.98898697, 1611.13356733, 1630.67317144, 1646.95898459, 1657.48698199, 1649.12948311, 1696.73780763, 1689.35313928, 1696.95183506, 1732.21499722, 1747.69733935, 1781.32757051, 1818.09490435, 1834.09030507, 1926.15082217, 1859.92530668, 2151.1016805,  1956.80852327, 1879.05791407, 2458.86864287, 2330.90108148, 2213.32551067, 2346.44132438, 2522.04173236, 2635.59962011, 2772.58569356, 2824.4466118,  3077.71843839, 3232.91498893, 3382.89719952, 3592.32227835, 3809.64020189, 4094.90969955, 4436.375497, 4784.09874903, 5009.7500054,  4477.66924985, 6147.96520728, 4695.83159672, 4359.41460182, 5589.05085813, 4725.70075394, 4881.12053623, 4660.9441244, 4810.73839623, 4466.84765647, 4641.22351732, 4289.25945001, 4457.87853929, 4190.07434171, 4658.36166673, 4783.69182981, 5304.53607631, 5216.03766002])
#T=np.array([1.14008939e+03, 1.14008939e+03, 1.14025259e+03, 1.09762358e+03, 1.21127396e+03, 1.03105343e+03, 1.31129429e+03, 9.63516147e+02, 1.43818133e+03, 8.87678815e+02, 1.58747402e+03, 7.33429710e+02, 1.76856173e+03, 6.58307889e+02, 1.80713211e+03, 6.00872607e+02, 1.94399980e+03, 4.47834908e+02, 2.17902706e+03, 2.42358816e+02, 2.41128812e+03, 3.68077184e+01, 2.75272566e+03, 1.05818865e+02, 3.85173373e+02, 1.84973381e+03, 1.98342051e+03, 1.36338371e-05, 5.75388188e+02, 1.54318410e+03, 9.10032702e+02, 1.34720795e+03, 3.13646884e-01, 1.63427536e+03, 1.42902416e+00, 2.46159068e+03, 6.06873722e+01, 4.45117409e+01, 1.46486286e+03, 2.08851684e+03, 2.53776509e+03, 3.28843992e+01, 1.14427851e+03, 1.58451391e+03, 3.04182821e+02, 1.30066850e+02, 1.24963972e+02, 1.58750134e+03, 7.21944595e+03, 8.97858116e+02, 3.67241863e+03, 5.46901528e+03, 4.79864613e+03, 4.19099483e+03, 4.44442278e+03, 4.16478960e+03, 4.62883718e+03, 4.77459900e+03, 5.30609141e+03, 5.30609141e+03])
#T=np.array([1.14008939e+03, 1.14008939e+03, 1.14025259e+03, 1.09762358e+03, 1.21127396e+03, 1.03105343e+03, 1.31129429e+03, 9.63516147e+02, 1.43818133e+03, 8.87678815e+02, 1.58747402e+03, 7.33429710e+02, 1.76856173e+03, 6.58307889e+02, 1.80713211e+03, 6.00872607e+02, 1.94399980e+03, 4.47834908e+02, 2.17902706e+03, 2.42358816e+02, 2.41128812e+03, 3.68077184e+01, 2.75272566e+03, 1.05818865e+02, 3.85173373e+02, 1.84973381e+03, 1.98342051e+03, 1.36338371e-05, 5.75388188e+02, 1.54318410e+03, 9.10032702e+02, 1.34720795e+03, 3.13646884e-01, 1.63427536e+03, 1.42902416e+00, 2.46159068e+03, 6.06873722e+01, 4.45117409e+01, 1.46486286e+03, 2.08851684e+03, 2.53776509e+03, 3.28843992e+01, 2.38111120e+02, 5.47071723e+02, 4.46403079e+02, 1.21357658e+02, 1.21597515e+02, 1.57549903e+03, 2.02860791e+03, 2.33869099e+03, 3.10212964e+03, 3.08077806e+03, 4.11359421e+03, 3.84825667e+03, 5.07901559e+03, 4.43432647e+03, 5.19298553e+03, 4.38240412e+03, 5.20661888e+03, 5.15623893e+03])
#T=np.array([1361.60099485, 1361.60099485, 1348.10636864, 1359.26173367, 1365.51410762, 1364.79466697, 1386.63273508, 1391.43381951, 1414.97022713, 1427.36809419, 1442.81608175, 1417.64224002, 1488.75114702, 1455.55989851, 1462.67196739, 1500.7943892,  1499.57349434, 1526.82826429, 1572.01496092, 1532.50324093, 1698.36391959, 1481.11749337, 1940.14989648, 1591.36027791, 1327.68652447, 2279.97659708, 1956.14215226, 1649.20839028, 1844.38203339, 2041.20552, 2075.67612943, 2229.37121206, 2159.40512714, 2465.75696785, 2654.29744181, 2754.23556899, 2952.29052664, 3210.8734684,  3352.10332479, 4126.33333733, 3179.17136945, 6010.23981764, 3942.89079917, 5327.125787,   6012.07003057, 3753.43901489, 5498.7853962,  4879.06672688, 4843.08066745, 4657.74009852, 4813.67483997, 4466.4389955,  4641.20145683, 4289.24057665, 4457.65297604, 4189.59168569, 4657.84898596, 4783.53846147, 5304.55906069, 5304.55906069])
 #T=np.array([1361.60099485, 1361.60099485, 1348.10636864, 1359.26173367, 1365.51410762, 1364.79466697, 1386.63273508, 1391.43381951, 1414.97022713, 1427.36809419, 1442.81608175, 1417.64224002, 1488.75114702, 1455.55989851, 1462.67196739, 1500.7943892,  1499.57349434, 1526.82826429, 1572.01496092, 1532.50324093, 1698.36391959, 1481.11749337, 1940.14989648, 1591.36027791, 1327.68652447, 2279.97659708, 1956.14215226, 1649.20839028, 1844.38203339, 2041.20552, 2075.67612943, 2229.37121206, 2159.40512714, 2465.75696785, 2654.29744181, 2754.23556899, 2952.29052664, 3210.8734684,  3352.10332479, 4126.33333733, 3179.17136945, 3010.23981764, 3942.89079917, 5327.125787,   3012.07003057, 3753.43901489, 5498.7853962,  4879.06672688, 4843.08066745, 4657.74009852, 4813.67483997, 4466.4389955,  4641.20145683, 4289.24057665, 4457.65297604, 4189.59168569, 4657.84898596, 4783.53846147, 5304.55906069, 5304.55906069])
 #T=np.array([1166.73243405, 1166.73243405, 1145.93701728, 1161.67722705, 1168.83391737, 1154.19397154, 1200.6320151,  1166.40463042, 1238.03751328, 1191.17961565, 1278.8899439,  1154.93086638, 1342.79307165, 1187.91087342, 1282.4811702, 1230.35109739, 1330.14824255, 1164.37208362, 1504.0407872,   995.12361321, 1746.19337998,  818.92016435, 1969.05850471, 1046.92335286,  402.17841577, 2034.3250399,  1877.33936334,  321.53172865, 1018.05816492, 1583.19335527, 1164.75061021, 1461.85554817,  820.81619476, 1556.78380019, 1159.2894097, 1861.79335322, 1852.25256339,  809.39644273, 3061.02780824, 2382.70265785,  279.58551007, 2352.68981586, 2202.84349469, 1370.13872606, 2304.29823779, 3375.68863256, 3710.17861398, 4444.88187716, 5010.83325732, 5491.9902567, 5217.65107858, 4527.52728471, 4565.010369,   4273.70484946, 4453.00403754, 4182.04801685, 4644.41331888, 4772.68623636, 5301.88116071, 5301.88116071])

    #T=np.array([1295.38843627, 1295.38843627, 1285.3072969,  1290.82039188, 1298.34825859, 1301.35196201, 1315.41235943, 1326.56811949, 1344.32086061, 1361.18966188, 1367.41889507, 1361.19293729, 1401.82395326, 1393.93574455, 1392.20133468, 1416.92978313, 1427.96620721, 1451.26594282, 1471.03723421, 1489.27712206, 1531.45274914, 1501.59343018, 1727.40701898, 1485.78307951, 1429.22160603, 1925.18850577, 1805.98874793, 1630.34607092, 1650.47801858, 1747.31265314, 1806.28531606, 1818.28976657, 1800.17550375, 1903.90359779, 1910.94739202, 1930.50292689, 1957.82271548, 1978.11836739, 2003.54198599, 2004.67944399, 2006.78454412, 2005.44639279, 2000.83474276, 1999.8340155,  1999.98087492, 2000.00021728, 2000.00002433, 1999.99999992, 1999.99999999, 2000., 2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         2000.,         2000.,         2000.        ])
    #T=np.array([1295.38843627, 1295.38843627, 1285.3072969,  1290.82039188, 1298.34825859, 1301.35196201, 1315.41235943, 1326.56811949, 1344.32086061, 1361.18966188, 1367.41889507, 1361.19293729, 1401.82395326, 1393.93574455, 1392.20133468, 1416.92978313, 1427.96620721, 1451.26594282, 1471.03723421, 1489.27712206, 1531.45274914, 1501.59343018, 1727.40701898, 1485.78307951, 1429.22160603, 1925.18850577, 1805.98874793, 1630.34607092, 1650.47801858, 1747.31265314, 1806.28531606, 1818.28976657, 1800.17550375, 1903.90359779, 1910.94739202, 1930.50292689, 1957.82271548, 1978.11836739, 2003.54198599, 2004.67944399, 2006.78454412, 2005.44639279, 2216.17679816, 2211.43500261, 2379.68709147, 2354.64220537, 2509.70996269, 2474.47998036, 2621.24867204, 2579.03878739, 2719.81499733, 2672.37557401, 2808.53480438, 2756.98247785, 2889.45013671, 2834.56281089, 2963.97490054, 2899.83769142, 2806.75594742, 2007.61325093])
	#T=np.array([1295.38843627, 1295.38843627, 1285.3072969,  1290.82039188, 1298.34825859, 1301.35196201, 1315.41235943, 1326.56811949, 1344.32086061, 1361.18966188, 1367.41889507, 1361.19293729, 1401.82395326, 1393.93574455, 1392.20133468, 1416.92978313, 1427.96620721, 1451.26594282, 1471.03723421, 1489.27712206, 1531.45274914, 1501.59343018, 1727.40701898, 1485.78307951, 1429.22160603, 1925.18850577, 1805.98874793, 1630.34607092, 1650.47801858, 1747.31265314, 1806.28531606, 1818.28976657, 1800.17550375, 1903.90359779, 1910.94739202, 1930.50292689, 1957.82271548, 1978.11836739, 2003.54198599, 2004.67944399, 2006.78454412, 2005.44639279, 2216.17679816, 2211.43500261, 2379.68709147, 2354.64220537, 2509.70996269, 2474.47998036, 2621.24867204, 2579.03878739, 2719.81499733, 2672.37557401, 2808.53480438, 2756.98247785, 2889.45013671, 2834.56281834, 2964.00022453, 2906.05344893, 3000.55065298, 3000.40957746])
	#T=np.array([1295.38843627, 1295.38843627, 1285.3072969,  1290.82039188, 1298.34825859, 1301.35196201, 1315.41235943, 1326.56811949, 1344.32086061, 1361.18966188, 1367.41889507, 1361.19293729, 1401.82395326, 1393.93574455, 1392.20133468, 1416.92978313, 1427.96620721, 1451.26594282, 1471.03723421, 1489.27712206, 1531.45274914, 1501.59343018, 1727.40701898, 1485.78307951, 1429.22160603, 1925.18850577, 1805.98874793, 1630.34607092, 1650.47801858, 1747.31265314, 1806.28531606, 1818.28976657, 1800.17550375, 1903.90359779, 1910.94739202, 1930.50292689, 1957.82271548, 1978.11836739, 1700.51207264, 1871.41099395, 1783.8836537,  2183.02805517, 2198.48586807, 2510.93134187, 2449.63516026, 2723.02310708, 2636.55060865, 2891.43213821, 2790.50871879, 3033.66458566, 2922.97498135, 3157.82548078, 3039.96438294, 3268.54832128, 3145.15678146, 3368.81839654, 3241.01346411, 3460.64794595, 3325.36371655, 3325.80318457])
	#T=np.array([1178.46050506, 1178.46050506, 1158.16539937, 1174.37778508, 1178.06096281, 1173.17851869, 1201.09138574, 1196.16830535, 1227.54020345, 1231.85157355, 1257.82728181, 1206.28642191, 1313.89195772, 1242.81159898, 1253.69573808, 1294.98256266, 1272.43517695, 1294.3404648,  1355.15965385, 1231.20577993, 1526.28618793, 1044.54142404, 1858.50026859, 1107.65359828,  631.93908353, 2145.15086056, 1653.85027575,  866.74688677, 1176.40610006, 1405.25589959, 1426.37963897, 1457.27641464, 1140.73450926, 1550.65142033, 1613.69426541, 1604.19171353, 1668.77489811, 1966.34051861, 1731.56387867, 1871.34555329, 1781.93563189, 2182.87020262, 2198.52372349, 2510.93652003, 2449.6347282, 2723.02303278, 2636.55061024, 2891.43213865, 2790.50871879, 3033.66458566, 2922.97498135, 3157.82548078, 3039.96438294, 3268.54832128, 3145.15678146, 3368.8183966,  3241.01351773, 3460.65105097, 3325.47156291, 3325.47156291])

#T=np.array([1291.74553414, 1291.74553414, 1281.51624758, 1287.11857105, 1294.67568256, 1297.46431999, 1312.48578361, 1319.2051256,  1349.61023885, 1354.47161464, 1357.23916734, 1373.03049762, 1388.37047137, 1388.97150883, 1389.92927331, 1403.26560825, 1429.58436389, 1447.43638928, 1464.79435612, 1493.62002942, 1495.10123208, 1609.60523752, 1614.24635759, 1625.95490096, 1627.71829211, 1642.54250119, 1640.53649588, 1634.91175639, 1655.13633967, 1732.60729269, 1824.83959657, 1824.81213048, 1824.08010363, 1829.36607648, 1906.26678242, 1931.90317657, 1956.57514979, 1977.41632186, 2003.61722163, 2004.80088204, 2006.95321696, 2005.58447096, 2000.8556566,  1999.82924029, 1999.98030787, 2000.00023112, 2000.00002565, 1999.99999991, 1999.99999999, 2000., 2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         2000.,         2000.,         2000.        ])

#####T=np.array([2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         2000.,         2000.,         2000., 2000.,         2000.,         1840.10649735, 1581.41598416, 1632.96597127, 1652.66590461, 2016.63744453, 2147.26505548, 2390.94534897, 2426.04073738, 2622.18735774, 2627.29132693, 2802.02513079, 2841.09235823, 2992.33233144, 2987.48398926, 2975.37559817, 3014.77942443, 3059.2245599,  3071.8627651, 3054.57779899, 3047.25579402, 3047.45068187, 3048.15979443, 3048.17714558])

#T=np.array([2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 5.44417655e+002, 5.44417655e+002, 2.51381284e-276, 1.10911394e+003, 1.23510315e+003, 2.01331886e+003, 1.96779933e+003, 2.49350033e+003, 2.31200825e+003, 2.77649949e+003, 2.58486120e+003, 3.00122461e+003, 2.76033407e+003, 2.97045742e+003, 2.85500567e+003, 2.94014181e+003, 2.89325586e+003, 2.89336040e+003, 2.88828290e+003, 2.89007284e+003, 2.89322597e+003, 2.89247832e+003, 2.89111586e+003, 2.89110677e+003])

#T=np.array([1.12362788e+03, 1.12362788e+03, 1.11267594e+03, 1.11893892e+03, 1.12199430e+03, 1.12597248e+03, 1.13341540e+03, 1.15185817e+03, 1.16424260e+03, 1.18897631e+03, 1.18554873e+03, 1.18275709e+03, 1.21567882e+03, 1.20672072e+03, 1.20048182e+03, 1.20613853e+03, 1.23039389e+03, 1.23441412e+03, 1.22884433e+03, 1.28396015e+03, 1.27719941e+03, 1.26817673e+03, 1.38998993e+03, 1.17888780e+03, 1.14706848e+03, 1.43418457e+03, 1.36098003e+03, 5.75000661e+02, 5.83064625e+02, 8.99413307e+02, 6.90206864e+02, 7.49665525e-01, 2.02583066e-01, 7.55636650e-01, 9.27927417e+01, 3.06762385e+02, 3.63481588e+02, 4.18203462e+02, 5.31657455e+02, 1.22315626e+03, 1.87726601e+03, 2.95863478e+03, 1.94959454e+03, 1.55285463e+03, 1.86575634e+03, 1.93991142e+03, 1.91294304e+03, 1.85002089e+03, 2.38297138e+03, 2.44683844e+03, 2.39616353e+03, 2.37851973e+03, 2.56195868e+03, 2.66993850e+03, 2.86843413e+03, 2.90066167e+03, 2.89611283e+03, 2.89284310e+03, 2.89102730e+03, 2.89102730e+03])

#T=np.array([2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 2.00000000e+002, 5.44417655e+002, 5.44417655e+002, 2.51381284e-1, 1.10911394e+003, 1.23510315e+003, 2.01331886e+003, 1.96779933e+003, 2.49350033e+003, 2.31200825e+003, 2.77649949e+003, 2.58486120e+003, 3.00122461e+003, 2.76033407e+003, 2.97045742e+003, 2.85500567e+003, 2.94014181e+003, 2.89325586e+003, 2.89336040e+003, 2.88828290e+003, 2.89007284e+003, 2.89322597e+003, 2.89247832e+003, 2.89111586e+003, 2.89110677e+003])

#T=np.array([1117.53604176, 1117.53604176, 1101.25461167, 1110.15788599, 1114.74048243, 1117.73209256, 1128.38150844, 1143.62147393, 1155.2184338,  1179.85523669, 1177.01235952, 1168.11674892, 1218.30463223, 1196.17925444, 1187.41898236, 1201.9232855,  1215.50604718, 1225.10515633, 1218.72417133, 1259.42619345, 1260.12478835, 1213.67435186, 1464.70977159, 1072.25054983,  991.09630411, 1571.33857422, 1342.59029092,  285.53140791,  331.81253504,  609.29110656,  432.12701472,   94.64823872,   89.92490694,   94.66484632,   92.79844949,   73.13191826,   92.61501709,  215.70774585,  219.03156945,  218.73488151,  218.97913126,  234.77636811,  205.1773742,   199.15528356,  199.90591207,  199.99953979,  200.00000074,  200.,          200.,          200.,  200.,          200.,          200.,          200.,          200.,  200.,          200.,          200.,          200.,          200.        ])




#T=np.array([1360.08633971, 1360.08633971, 1354.09736876, 1356.94429301, 1361.41751262, 1370.42253659, 1379.84582114, 1394.20569357, 1415.96277536, 1430.72024598, 1431.08795256, 1453.24361425, 1460.11317035, 1462.18253976, 1463.56570382, 1480.22745713, 1516.10746085, 1530.33456352, 1546.47497195, 1589.19061028, 1598.44467337, 1638.13412091, 1772.89422107, 1718.87118069, 1720.87650766, 1829.08937506, 1805.7947076,  1933.30017337, 1926.20146901, 1948.82496398, 1951.44214492, 2234.91963546, 2244.01835793, 2294.54961901, 2637.26073702, 2799.52779893, 2968.69363623, 3187.72298171, 3475.33587194, 3795.4298905, 4085.51740931, 4630.06993596, 5440.36009318, 5266.21937988, 4926.76844006, 4970.73466187, 5003.4951844,  5000.941585,   4999.94143025, 4999.99004815, 5000.00034229, 5000.00003603, 4999.9999993,  4999.99999995, 5000., 5000.,         5000.,         5000.,         5000.,         5000.        ])

#T=np.array([1064.39203408, 1064.39203408, 1038.0701481,  1058.38789454, 1059.35083662, 1054.08908356, 1079.23103219, 1077.89906928, 1101.19197601, 1117.37534213, 1126.2371773,  1087.19645459, 1187.43448866, 1116.84625492, 1112.7703378, 1153.02210364, 1123.39774078, 1148.12816819, 1143.52437589, 1135.76650666, 1135.02968201, 1099.8871759,  1082.6714198,   348.66424841,  266.89541837, 1468.83987871,  704.89509487,  270.5797195,   186.28212204,  224.92843137,  235.7759498,   196.31044662,  147.94052744,  197.33509102,  175.09101724,  175.92814161,  183.70990478,  191.03479135,  206.79591189,  205.38817152,  206.2677185,   204.5797539,   200.70257165,  199.88502504,  199.98720331, 199.99993622,  200.00000001,  200.,          200.,          200.,  200.,          200.,          200.,          200.,          200.,  200.,          200.,          200.,          200.,          200.        ])
Tsolu=np.array([ 801.04726038,  802.06800173,  805.98237113,  810.46787058,  818.47038155,  827.43164902,  839.73617398,  852.45641686,  867.41307381,  880.75136987,  893.33864209,  902.22252756,  910.80014821,  918.48811073,  928.69236472,  938.88333716,  951.69035626,  964.57268834,  979.87861396,  995.35824736, 1013.55341028, 1031.98709707, 1052.87973707, 1071.8743683,  1091.3655835, 1112.35532581, 1135.21706267, 1158.02967468, 1185.67665515, 1217.44437484, 1256.03165636, 1301.02118829, 1354.51825581, 1416.32259537, 1485.65744154, 1555.01349023, 1624.90291458, 1692.75385532, 1756.65506873, 1800.78171282, 1834.85726405, 1859.19141734, 1873.35973387, 1878.08347106, 1878.46252075, 1878.69783238, 1879.21135397, 1880.30695016, 1882.63383997, 1887.62244917, 1897.78171099, 1917.68511478, 1955.63669003, 2024.40178139, 2138.58925498, 2308.09571828, 2530.19339384, 2786.7255833,  3052.65723082, 3313.30311644])


def plot_fluxes(flux_in,flux_out,firstplot=False):
    
    fig, (ax1, ax2) = plt.subplots(1, 2)
    y=atm.p[:59]/1e5
    
    x1_fluxin=flux_in
    x1_fluxout=flux_out
    ax1.plot(x1_fluxin,y,label='In')
    ax1.plot(x1_fluxout,y,label='Out')
    ax1.set_xlabel(r'$Flux (\frac{W}{m^{2}})$')
    ax1.set_yscale('log')
    ax1.invert_yaxis() 
    ax1.set_ylabel(r'Pressure (bar)')
    plt.ylabel('Pressure (bar)') 
    ax1.legend()
    
    
    x2=(flux_in-flux_out)/flux_in
    ax2.plot(x2,y)
    ax2.set_xlabel(r'$\frac{{Flux_{In} - Flux_{Out}}}{{Flux_{In}}}$')
    ax2.set_yscale('log')
    ax2.invert_yaxis() 
    ax2.set_ylabel(r'Pressure (bar)')
    plt.ylabel('Pressure (bar)')
    
    plt.tight_layout()
    if firstplot==True:
        plt.savefig('plot0.png')
    else:
        plt.savefig('plot.png')
    
   

def plotTp(ax=None,axisOnly=False,figsize=[8,10],save=True,showTeq=True,marker='x',punit='bar',partialPresMol=None,forceLabelAx=False,**kwargs):
    ## show convection limit
    if ax is None:
        fig, ax = plt.subplots(1,figsize=figsize)
        ax.set_xlabel('Temperature [K]')
        ax.set_ylabel('Pressure ['+punit+']')
        if axisOnly is False:
            if showTeq:
                plt.axvline(x=atm.Teq,color='r',linestyle=':',zorder=-10)
            if partialPresMol is None:
                ax.semilogy(atm.T,atm.p*unitfac(punit),marker=marker,**kwargs)  
                ax.set_ylabel('Pressure ['+punit+']')
            else:
                ax.semilogy(atm.T,atm.p*unitfac(punit)*atm.getMixRatio(partialPresMol),marker=marker,**kwargs)  
                ax.set_ylabel('Partial pressure of {} [{}]'.format(partialPresMol,punit))
        
        ax.semilogy(Tsolu,atm.p*unitfac(punit),marker=marker,**kwargs) 
        ax.set_ylim([1e-12,1e4])
        ax.invert_yaxis()
        ax.minorticks_on()
        if save:
            fig.savefig('Tp.pdf')            
        return fig,ax
    else:
        if partialPresMol is None:
            ax.semilogy(atm.T,atm.p*unitfac(punit),marker=marker,**kwargs)  
            ax.set_ylabel('Pressure ['+punit+']')
        else:
            ax.semilogy(atm.T,atm.p*unitfac(punit)*atm.qmol_lay[:,atm.getMolIndex(partialPresMol)],marker=marker,**kwargs)  
            ax.set_ylabel('Partial pressure of {} [{}]'.format(partialPresMol,punit))
                
    if forceLabelAx:
        ax.set_xlabel('Temperature [K]')
        ax.set_ylabel('Pressure ['+punit+']')
        ax.set_ylim([1e-12,1e4])
        ax.invert_yaxis()
        ax.minorticks_on()



def plotTpChanges(TList,ax=None,save=True,close=True,loop=None,**kwargs):
        
        if ax is None:
            fig, ax = plt.subplots(1,sharex=True,sharey=True,figsize=[8,10])
            ax.set_xlabel('Temperature [K]')
            ax.set_ylabel('Pressure [bar]')
            plt.axvline(x=atm.Teq,color='black',linestyle='--')
            for temp in range(len(TList[0])):
                ax.semilogy( TList[:,temp],atm.p/1e5,**kwargs)  
            ax.semilogy( TList[:,temp],atm.p/1e5,marker='x',**kwargs)
            ax.set_ylim([1e-10,1e4])
            #ax.set_xlim([self.TList.max*1.2])
            ax.invert_yaxis()
            ax.minorticks_on()
            if save:
                if loop is None:
                    fig.savefig('_TpChange.pdf')
                else:
                    fig.savefig('_TpChange'+str(loop)+'.pdf')
            if close:
                plt.close(fig)
            return fig,ax
        else:
            for temp in range(len(TList[0])):
                ax.semilogy( TList[:,temp],atm.p/1e5,marker='x',label=temp,**kwargs)



def tp_trad(T,plot=True):
    atm.T=T    
    N=len(T)
    levels=T.copy()    
    TList =np.array([np.array([level]) for level in deepcopy(levels)])
    extinctCoef=atm.opac['extinctCoef'].copy()
    scatCoef=atm.opac['scatCoef'].copy()
    #extinctCoef = 0.5*(extinctCoef[:atm.nLay-1,:]+extinctCoef[1:atm.nLay,:])
    #scatCoef = 0.5*(scatCoef[:atm.nLay-1,:]+scatCoef[1:atm.nLay,:])          
    
    pdb.set_trace()
    #------------------------------------------------------------------------#
    #---------------Calculate temperature perturbations----------------------#
    #------------------------------------------------------------------------#
     
    deltas=np.ones(N)*11
    doplot=True
    firstplot=True
    count=0
 #   for j in range(500):
 #       #while True:
 #       if count>10:
 #           flux0=get_flux_levels(atm.T,extinctCoef,scatCoef,doplot=True)
 #           count=0
 #       else:
 #           flux0=get_flux_levels(atm.T,extinctCoef,scatCoef,doplot=False)
 #       #print(flux0)
 #       dTdt=get_dTdt(flux0)
 #       #print(dTdt)
 #       #print(dTdt[-1])
 #       levels=levels+np.append(dTdt,dTdt[-1])*1
 #       levels[0]=levels[1]
 #       levels[-1]=levels[-2]
 #       atm.T=levels
 #       plotTp(forceLabelAx=True)
 #       print(count)
 #       count+=1
        
        
    while False:
        if count>10:
            flux0=get_flux_levels(atm.T,extinctCoef,scatCoef,doplot=True)
            count=0
        else:
            flux0=get_flux_levels(atm.T,extinctCoef,scatCoef,doplot=False)
        #print(flux0)
        dTdt=get_dTdt(flux0)
        #print(dTdt)
        #print(dTdt[-1])
        print('rr')
        #levels = levels + np.concatenate([np.zeros(42), dTdt[41:]]) * 10000
        levels = levels + np.concatenate([np.zeros(42), dTdt[41:]]) * 50000
        #levels = levels + np.concatenate([np.zeros(30), dTdt[29:]]) * 100000
        #levels = levels + np.concatenate([np.zeros(38), dTdt[37:]]) * 100000
        #if count==9:
            #for k in range(len(levels)-3):
            #    if (levels[k]>levels[k+1] and levels[k+1]<levels[k+2] and levels[k+2]>levels[k+3]) or (levels[k]<levels[k+1] and levels[k+1]>levels[k+2] and levels[k+2]<levels[k+3]):
            #        smooth=0.25*(levels[k]+levels[k+1]+levels[k+2]+levels[k+3])
            #        #interval=levels[k+3]-levels[k]
            #        levels[k]=smooth
            #        levels[k+1]=smooth
            #        levels[k+2]=smooth
            #        levels[k+3]=smooth
        print(levels)
        levels[0]=levels[1]
        levels[-1]=levels[-2]
        atm.T=levels
        plotTp(forceLabelAx=True)
        print(count)
        count+=1
    
    ##while np.max(np.abs(deltas))>0.1:
 #   for i in range(35):
 #       deltas,levels=take_step(TList,levels,N,extinctCoef,scatCoef,doplot,firstplot)
 #       TList = np.c_[TList,levels]
 ##       firstplot=False
 #       #doplot=False
 ##       count+=1
 #       print(count)
 #       if count>20*10**20:
 #           pdb.set_trace()
 #           count=0
 #           #doplot=True
 #   
    #for j in range(500):
    rate=5000
    fast=False
    start_lock=0
    pos_change=np.zeros(60)
    neg_change=np.zeros(60)
    stable=np.ones(60)
    while True:
        flux0=get_flux_levels(atm.T,extinctCoef,scatCoef,doplot=True,firstplot=firstplot)
        firstplot=False
        #print(flux0)
        dTdt=get_dTdt(flux0)
        dTdt[0]=deepcopy(dTdt[1]) 
        print(np.amax(np.abs(dTdt[start_lock:]*rate)))
        
        delta_levels=dTdt[start_lock:]*rate
        print(delta_levels)
        
        for level in range(len(delta_levels)):
            if delta_levels[level]<-20:
                delta_levels[level]=-20   
            if delta_levels[level]>20:
                delta_levels[level]=20
            if delta_levels[level]<0:
                neg_change[level]=1
            if delta_levels[level]>0:
                pos_change[level]=1
            if neg_change[level]==1 and pos_change[level]==1:
                stable[level]=0
        
        stable_del=[]
        for level in range(len(delta_levels)):
            if stable[level]==1:
                stable_del.append(delta_levels[level])
        
        print(stable)
       
        if len(stable_del)>0:
            if np.amax(np.abs(np.array(stable_del)))<0.2:
                #start_lock+=1
                if start_lock>N-1:
                    start_lock=N-1
                print('speeding up')
                rate*=20
                print(f'new rate: {rate}')  
        if count>800:
            if count%100==0:
                rate/=10
                print(f'rate reduced: {rate}')      
                
        
        
        
        levels[start_lock:]+=delta_levels
    
    
    # while True:
#         flux0=get_flux_levels(atm.T,extinctCoef,scatCoef,doplot=True,firstplot=firstplot)
#         firstplot=False
#         #print(flux0)
#         dTdt=get_dTdt(flux0)
#         dTdt[0]=deepcopy(dTdt[1])
#         #if np.amax(np.abs(dTdt*rate))<5:
#         #    rate*=3.5
#         #    print(f'rate: {rate}')
#         #if np.amax(np.abs(dTdt*rate))>30:
#         #    rate*=1/3.5
#         #    print(f'rate: {rate}')
#         
#         if fast: 
#             if np.amax(np.abs(dTdt[30:]*rate))<1:
#                 fast=True 
#                 print('speeding up')
#                 rate*=10
#                 print(f'new rate: {rate}')
#             print(np.amax(np.abs(dTdt[30:]*rate)))
#         else:
#             if np.amax(np.abs(dTdt*rate))<1:
#                 fast=True 
#                 print('speeding up')
#                 rate*=10
#                 print(f'new rate: {rate}')
#             print(np.amax(np.abs(dTdt*rate)))
#         #print(dTdt)
#         #print(dTdt[-1])
#         #levels=levels+np.append(dTdt,dTdt[-1])*1*rate
#         if fast:
#             levels[30:]+=dTdt[30:]*rate
#         else:
#             levels+=dTdt*rate
        ###for k in range(len(levels)-1):
        ###    print(abs(levels[k+1]-levels[k]))
        ###    if abs(levels[k+1]-levels[k])>350:
        ###        smooth=0.5*(levels[k+1]+levels[k])
        ###        levels[k+1]=smooth
        ###        levels[k]=smooth
        #if count==90:
            #for k in range(len(levels)-3):
            #    if (levels[k]>levels[k+1] and levels[k+1]<levels[k+2] and levels[k+2]>levels[k+3]) or (levels[k]<levels[k+1] and levels[k+1]>levels[k+2] and levels[k+2]<levels[k+3]):
            #        smooth=0.25*(levels[k]+levels[k+1]+levels[k+2]+levels[k+3])
            #        #interval=levels[k+3]-levels[k]
            #        levels[k]=smooth
            #        levels[k+1]=smooth
            #        levels[k+2]=smooth
            #        levels[k+3]=smooth
        #levels[0]=levels[1]
        #levels[-1]=levels[-2]
        atm.T=deepcopy(levels)
        plotTp(forceLabelAx=True)
        print(count)
        #print(atm.T)
        count+=1
    
            
def get_flux_levels(in_levels,extinctCoef,scatCoef,doplot=False,firstplot=False):
    atm.T=in_levels
    toon= get_fluxes_toon(atm,atm.IrradStar,extinctCoef,scatCoef)
    
    
    #for qw in range(59):
    #    toon[0][qw][:7900]=0
    #    toon[1][qw][:7900]=0
    
    
    flux0_up=toon[0]
    flux0_down=toon[1]
    flux0=np.zeros((len(in_levels),len(atm.wave)))
    #if doplot==True: 
    #    fluxes_in=np.zeros((len(in_levels)-1,len(atm.wave)))
    #    fluxes_out=np.zeros((len(in_levels)-1,len(atm.wave)))
    for lev in range(1,len(flux0)):
        flux_in=flux0_up[lev]+flux0_down[lev-1]
        flux_out=flux0_down[lev]+flux0_up[lev-1]
        flux0[lev-1]=flux_in-flux_out
        #flux0[lev]=toon[2][lev]-toon[2][lev-1]
        #fluxes_in[lev]=toon[2][lev]
        #fluxes_out[lev]=toon[2][lev-1]
        #if doplot==True: 
        #    fluxes_in[lev]=flux_in
        #    fluxes_out[lev]=flux_out   
    #if doplot==True: 
        #print('fluxes_in')
        #print(fluxes_in)
        #print('fluxes_out')
        #print(fluxes_out)
    #    print('plot')
    #    plot_fluxes(np.trapz(x=atm.wave,y=fluxes_in),np.trapz(x=atm.wave,y=fluxes_out),firstplot=firstplot)
    #flux0=toon[2]
    #flux0=toon[1]-toon[0]
    flux0[-1]=deepcopy(flux0[-2])
    #print(f'flux0:{flux0}')
    return flux0


def get_dTdt(flux0):
    z,dz,grav,ntot,nmol,MuAve,scaleHeight,RpBase,r=calcHydroEqui(T)
    Cp=14300 #[J*kg^-1*K^-1] (H2)
    #MuAve=uAtom*np.sum(atm.MolarMass[np.newaxis,:]*atm.qmol_lay,axis=1)  #[kg]
    #MuAve = 0.5*(MuAve[:atm.nLay-1]+MuAve[1:atm.nLay]) #[kg]
    #ntot=atm.p/(kBoltz*T) # [m^-3]
    #ntot = 0.5*(ntot[:atm.nLay-1]+ntot[1:atm.nLay]) # [m^-3]
    Mcp=np.append(dz,dz[-1])*ntot*MuAve*Cp #[J*K^-1*m^-2]
    flux_integrated=np.trapz(x=atm.wave,y=flux0) #[J*s^-1*m^-2]
    dp=np.diff(atm.p)
    dp=np.append(dp,dp[-1])
    print(grav*flux_integrated/Cp/dp)
    print(flux0)
    return grav*flux_integrated/Cp/dp
    #return flux_integrated/Mcp #[K*s^-1]
            

def calcHydroEqui(T):

        #Note: All values without "grid" in variable name are at cell centers
        
        #array of molar masses (atm.MolarMass) from readMoleculesProperties() above
        MuAve=uAtom*np.sum(atm.MolarMass[np.newaxis,:]*atm.qmol_lay,axis=1)  #[kg]
        
        #don't need to define p since already have atm.p
        ntot=atm.p/(kBoltz*T) # [m^-3]
        
        nmol=((ntot[:,np.newaxis]).dot(np.ones([1,atm.nMol], dtype=atm.numerical_precision)))*atm.qmol_lay #(iLev) in [m^-3]
        
        r               =np.zeros(atm.nLay, dtype=atm.numerical_precision)   # [m]
        grav            =np.zeros(atm.nLay, dtype=atm.numerical_precision)   # [m]
        scaleHeight     =np.zeros(atm.nLay, dtype=atm.numerical_precision)   # [m]
        dz              =np.zeros(atm.nLay, dtype=atm.numerical_precision)   # [m]
        
        r[atm.iLevRpRef]=deepcopy(atm.Rp)
        
        #Atmosphere below r[atm.iLevRpRef]=atm.Rp to higher pressures:
        for iLay in range(atm.iLevRpRef,atm.nLay-1):
                for repeat in range(1,5):
                    grav[iLay]        = G*atm.Mp / ( r[iLay] - 0.5*dz[iLay] )**2                                     # [m/s^2]
                    scaleHeight[iLay] = (kBoltz*T[iLay])/(MuAve[iLay]*grav[iLay])                 # [m]
                    dz[iLay]          = -scaleHeight[iLay]*np.log(atm.p[iLay]/atm.p[iLay+1]) # [m]
                r[iLay+1]     = r[iLay] - dz[iLay]
        #Atmosphere above r[atm.iLevRpRef]=atm.Rp to lower pressures:
        for iLay in range(atm.iLevRpRef,0,-1):
                for repeat in range(1,5):
                    grav[iLay-1]        = G*atm.Mp / ( r[iLay] + 0.5*dz[iLay-1] )**2                                     # [m/s^2]
                    scaleHeight[iLay-1] = (kBoltz*T[iLay-1])/(MuAve[iLay-1]*grav[iLay-1])         # [m]
                    dz[iLay-1]          = -scaleHeight[iLay-1]*np.log(atm.p[iLay-1]/atm.p[iLay]) # [m]
                r[iLay-1]     = r[iLay] + dz[iLay-1]
                
                   
  

        ## --> at this point it has determined r completely (everything else can now be derived from that)
        
        RpBase=r[-1]
        
        z=r-r[-1]         # [m]
        dz=np.zeros(atm.nLay-1, dtype=atm.numerical_precision)   # [m]
        dz=-np.diff(z)            # [m]   
        
        grav=G*atm.Mp /  r**2        # [m/s^2]
        scaleHeight=(kBoltz*T)/(MuAve*grav) # [m]
        
        #consistency check
#        scaleHeightLay = 0.5*(scaleHeight[:atm.nLay-1]+scaleHeight[1:atm.nLay])
#        dz2=-scaleHeightLay*np.log(atm.p[:-1]/atm.p[1:]) # [m]
#        print (dz2-dz)/dz*100

        return z,dz,grav,ntot,nmol,MuAve,scaleHeight,RpBase,r

x=tp_trad(T)
pdb.set_trace() 
